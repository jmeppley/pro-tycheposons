#!/usr/bin/env perl
# Created: 10 Apr 2019
# Author: Thomas Hackl, thackl@lim4.de
use warnings;
no warnings "qw";
use strict;
use Getopt::Long  qw(:config no_ignore_case bundling);
use Data::Dumper;
use FindBin qw($RealBin);

GetOptions (
    "out-dir|o=s" => \(my $out = "irve_finder"),
    "irve|i=s" => \(my $irve_file),
    "irve-info|x=s" => \(my $irve_info_file),
    "faa|a=s" => \(my $faa_file),
    "virus|v=s" => \(my $virus_file),
    "trna|r=s" => (\my $trna_file),
    "pre1=s" => \(my $pre1_file),
    "threads|t=i" => \(my $threads = 4),
    "help|h!" => \(my $help),
    "debug|D!" => \(my $debug),
) or die("Error in command line arguments\n");

if ($help || @ARGV == 0 || @ARGV > 2){
    print "Find integrated replicative vesicle-transmitted elements (IRVEs)\n";
    print "in genomes, and plot them.\n\n";
    print "Usage: irve_finder [options] {.fna | .fna .gff | .gff-with-seq}\n";
    printf " %-19s  %s\n", "-a/--faa", "protein file in fasta format [get from gff+fna if req.]";
    printf " %-19s  %s\n", "-i/--irve", "IRVE .hmm file or precomputed hmmer hits (.tbl/.tsv) [$RealBin/data/irve-v6.hmm]";
    printf " %-19s  %s\n", "-x/--irve-info", "irve info file [$RealBin/data/irve]";
    printf " %-19s  %s\n", "-v/--virus", "Virus .hmm file or precomputed hmmer hits (.tbl/.tsv) [$RealBin/data/virsorter_Pool_clusters.hmm]";
    printf " %-19s  %s\n", "-r/--trna", "tRNA fasta";
    printf " %-19s  %s\n", "-p/--pre1", "PRE1 repeat nucleotide hmm/tbl/tsv";
    printf " %-19s  %s\n", "-t/--threads", "number of threads to use in external commands";
    printf " %-19s  %s\n", "-o/--out", "write to this dir/prefix";
    printf " %-19s  %s\n", "-h/--help", "show this help";
    printf " %-19s  %s\n", "-D/--debug", "show debug messages";
    print "\nFor .fna only, genes will be predicted with prodigal to create a gff.\n";
    print "With precomputed irve/virus/... hits, no .fna/.faa is necessary.\n";

    exit 0;
}

# check positional input files: fna/gff
my ($gff_file, $fna_file, $pre);
if (@ARGV == 1) {
    if (qx(head -c1 $ARGV[0]) eq ">") {
        $fna_file = $ARGV[0];
    }else {
        $gff_file = $ARGV[0];
    }
}else {
    ($fna_file, $gff_file) = @ARGV;
}
$pre=$ARGV[0]; $pre =~ s/\.[^.]+$//;

# setup out dir
$out||=".";
unless (-d $out) { mkdir $out or die $!; }

# annotate genomes if necessary
if (!$gff_file){ # run prodigal to get $faa_file
    print STDERR "Predicting genes wit prodigal\n";
    $gff_file = "$out/$pre.gff";
    $faa_file = "$out/$pre.faa";
    run(qq(prodigal -i $fna_file -f gff -o $gff_file -a $faa_file));
}

# create protein file if necessary
my $need_faa = ($irve_file && $irve_file !~ /(tbl|tsv)$/) ||
    ($virus_file && $virus_file !~ /(tbl|tsv)$/);
if (!$faa_file && $need_faa){
    print STDERR "Extracting proteins from gff\n";
    get_faa_from_gff();
}

print STDERR "\nExtracting features from gff\n";
my $cds_bed = extract_features($gff_file, "CDS");
my $gap_bed = extract_features($gff_file, "gap");
my $trna_bed = extract_features($gff_file, "tRNA,tmRNA");

print STDERR "\nGathering annotations\n";
my $irve_hits = gather_annotations($irve_file, "irve.hits", $faa_file) if $irve_file;
my $virus_hits = gather_annotations($virus_file, "virus.hits", $faa_file) if $virus_file;
my $pre1_hits = gather_annotations($pre1_file, "pre1.nhmmscan.hits", $fna_file, 1) if $pre1_file;

print STDERR "\nSearching for (partial) tRNAs\n";
my $trna_hits = gather_trnas($trna_file) if $trna_file;

print STDERR "\nDetecting IRVE elements\n";
my $irve_tsv = "$out/$pre.scored_clusters.tsv";
my $irve_pdf = "$out/$pre.scored_clusters.pdf";
run(qq(Rscript $RealBin/irve_finder.R $irve_hits $cds_bed $trna_hits $irve_info_file $irve_tsv 2>&1), 1);

print STDERR "\nPlotting results\n";
run(qq(Rscript $RealBin/irve_plotter.R $irve_hits $cds_bed $trna_hits $irve_tsv $gap_bed $pre1_hits $virus_hits $irve_info_file $irve_pdf 2>&1), 1);

print STDERR "\nFinal cluster: $irve_tsv\nFinal plots:   $irve_pdf\n";

#------------------------------------------------------------------------------#
sub get_faa_from_gff{
    get_fna_from_gff() if !$fna_file;
    $faa_file = "$out/$pre.faa";
    run(qq(seqkit subseq --feature CDS --gtf $gff_file $fna_file | seqkit translate --trim > $faa_file));
}

sub get_fna_from_gff{
    $fna_file = "$out/$pre.fna";
    run(qq(sed -n '/##FASTA/,\${n;p}' $gff_file > $fna_file));
    die "##FASTA section missing in .gff" if -s $fna_file;
}

sub gather_annotations{
    my ($file, $suf, $fa_file, $nuc) = @_;
    if ($file !~ /(tbl|tsv)$/ ){
        if ($nuc) {
            run(qq(hmmpress $file)) unless -e $file.".h3i";
            run(qq(nhmmscan  -o /dev/null -E 1 --cpu $threads --tblout $out/$pre.$suf.tbl $file $fa_file));
        }else{
            run(qq(hmmsearch --cpu $threads --tblout $out/$pre.$suf.tbl -o /dev/null $file $fa_file));
        }
        $file = "$out/$pre.$suf.tbl"
    }
    if ($file =~ /tbl$/) {
        run(qq(hmmer-tbl2tsv $file > $out/$pre.$suf.tbl.tsv));
        $file = "$out/$pre.$suf.tbl.tsv";
    }
    if($nuc){
        run(qq(tail -n+2 $file | tsv-select -f3,7,8,13,12 > $out/$pre.$suf.tsv));
    } else {
        run(qq(tail -n+2 $file | cut -f1,3,5,6 > $out/$pre.$suf.tsv));
    }
    return "$out/$pre.$suf.tsv";
}

sub extract_features{
    my ($gff_file, $feat) = @_;
    my $suf = $feat;
    $suf =~ s/,/-/g;
    run(qq(gff2bed $gff_file --feat $feat > $out/$pre.$suf.bed));
    return "$out/$pre.$suf.bed";
}

sub gather_trnas{
    my ($trna_file) = @_;
    return $trna_file if $trna_file =~ /bed$/; # assume precomputed

    run(qq(makeblastdb -dbtype nucl -in $trna_file)) if $trna_file;
    my $trna_blast_tsv = "$out/$pre.tRNA.blastn.tsv";
    my $trna_blast_tmp = "$out/$pre.tRNA.blastn.tmp";
    my $trna_blast_bed = "$out/$pre.tRNA.blastn.bed";
    my $trna_part = "$out/$pre.tRNA.partial.bed";
    my $trna_full = "$out/$pre.tRNA.full.bed";
    my $trna_hits = "$out/$pre.tRNA.hits.bed";

    run(qq(blastn -num_threads $threads -task blastn -db $trna_file -query $fna_file -reward 1 -penalty -1 -gapopen 2 -gapextend 1 -perc_identity 80 -evalue 10e-2 -outfmt 7 >$trna_blast_tsv));
    run(qq(cat $trna_blast_tsv | blast2bed -qa | bedtools merge -delim ";" -c 4,5,6,5 -o collapse,max,distinct,collapse >$trna_blast_tmp));

    open(TMP, $trna_blast_tmp) or die $!;
    open(BED, ">$trna_blast_bed") or die $!;;
    while (<TMP>) {
        my @F= split("\t", $_);
        my @scores = split(";", $F[6]);
        my @trnas = split(";", $F[3]);
        my @idx = sort{$scores[$b] <=> $scores[$a]}0..$#scores;
        @idx = grep{$scores[$_] == $scores[$idx[0]]}@idx; # max index with ties
        print BED join("\t", @F[0..2], join(",", do { my %seen; grep { !$seen{$_}++ } map {(split("\\|"))[2]} @trnas[@idx]}), @F[4,5], join(";", @scores[@idx])), "\n";
    }
    close(TMP);
    close(BED);

    run(qq(bedtools intersect -wb -v -f .9 -a $trna_blast_bed -b $trna_bed >$trna_part));
    run(qq(bedtools intersect -wb -f .9 -a $trna_blast_bed -b $trna_bed >$trna_full));
    run(qq(cut -f 1-6 $trna_full | perl -pe 's/\$/\tfull/' >$trna_hits));
    run(qq(cut -f1-6 $trna_part | perl -pe 's/\$/\tpartial/' >>$trna_hits));

    return $trna_hits;
}


sub run{
    my($cmd, $print) = @_;
    print "+ $cmd\n" if $print;
    my $log = qx($cmd);
    die $log, "\nDo'h, something went wrong" if $?;
}
